.row {
    max-width: $grid-width;
  
    margin: 0 auto; //center block elements within other block elements. Auto means that the browser sets it equal from left and right

   
    &:not(:last-child){
        margin-bottom: $gutter-vertical;

        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small; 
        }
     }

     @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 3rem; 
     }

    @include clearfix;

    [class^="col-"] { //^ before the = only selects the class names that start with col- ...we could use $ to select classes that end with col- or * to select classes that contain col-
       //using the [] selects the attribute of the html element
        float: left;
       

        &:not(:last-child){
            margin-right: $gutter-horizontal;

            @include respond(tab-port){
                margin-right: 0;
                margin-bottom: $gutter-vertical-small; 
            }

        }

        @include respond(tab-port){
            width: 100% !important;
        }
    }

    .col-1-of-2 {
        width: calc((100% - #{$gutter-horizontal}) / 2); //When using a sass variable in the calc function we have to enclose it in #{}
       
    }

    .col-1-of-3 {
        width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
    }

    .col-2-of-3 {
        width: calc( 2 * ((100% - (2 * #{$gutter-horizontal})) / 3) + #{$gutter-horizontal}); //Multiply one column by 2 and then add on one of the gutter-horizontal
    }

    .col-1-of-4 {
        width: calc((100% - (3 * #{$gutter-horizontal})) / 4);
    }

    .col-2-of-4 {
        width: calc( 2 * ((100% - (3 * #{$gutter-horizontal})) / 4) + #{$gutter-horizontal});
    }

    .col-3-of-4 {
        width: calc( 3 * ((100% - (3 * #{$gutter-horizontal})) / 4) + 2 * (#{$gutter-horizontal}));
    }


}
